using AutoMapper;
using Demo.BLL.Helper;
using Demo.BLL.Interfaces;
using Demo.BLL.Models;
using Demo.DAL.Entities;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Demo.PL.Controllers
{
    [Authorize(Roles = "Admin")]
    public class UsersController : Controller
    {
        private readonly UserManager<ApplicationUser> userManager;

        public UsersController(UserManager<ApplicationUser> userManager)
        {
            this.userManager = userManager;
        }

        public async Task<IActionResult> Index(string SearchValue)
        {
            if (string.IsNullOrEmpty(SearchValue))
            {
                return View(userManager.Users);
            }
            else
            {
                var user =await userManager.FindByNameAsync(SearchValue);
                return View(new List<ApplicationUser>() { user });

                #region comments
                //new List<ApplicationUser>() { user }- فل بعتلها يوز كدا هتزعل IEnumrabale<ApplicatinUser> بتستقبل Index انا عملت دا كدا لان الفيو بتاعه ال
                #endregion
            }
        }

        // string ك id او غيرها بتاخد ال FindByIdAsync  سواء بقا userManager لان الفنكشن الى جوا  ... string هنا id ليه انا عامل ال 
        public async Task<IActionResult> Details(string id , string ViewName = "Details")
        {
            if (id == null)
                return NotFound();
            var user =await userManager.FindByIdAsync (id);
            if (user == null)
                return NotFound();
            return View(ViewName , user);   
        }
         
        [HttpGet]
        public async Task<IActionResult> Edit(string id)
        {
            return await Details(id, "Edit");
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit([FromRoute] string id, ApplicationUser updatedUser)
        {
            if (id != updatedUser.Id)
                return NotFound();
            if (ModelState.IsValid)
            {
                try
                {
                    #region comments
                    //update اروح اعدل علطول بيانات اليوزر لازم اجيبو الاول من الداتا بيز وبعدين اعدلو بايدي وبعدين اعملو userManager مينفعش ف ال
                    // عل طول update عل طول هيديني اكسبشن يقولى اليوزر دا بالفع موجود لانه مش مهندل انو ي  update عشان ل عملتو 
                    #endregion

                    var user = await userManager.FindByIdAsync(id);
                    user.UserName = updatedUser.UserName;
                    user.NormalizedUserName = updatedUser.UserName.ToUpper();
                    user.PhoneNumber = updatedUser.PhoneNumber;

                    #region comments
                    // مميزه ليه هوا فلو غيرت الايميل الرن تايم هيعمل واحده جديده للايميل الجديد SecurityStamp كل ايميل بيبقا معاه حاجه اسمها
                    // بتاعتك الجديده الى عملهالك الرن تايم SecurityStamp فانا بقولو هنا لو الايميل اتغير خد ال
                    // لكن انا مش هغير الايميل لان دا مش لوجيك انى اغير ايميل يوزر اصلا
                    //user.Email = updatedUser.Email;
                    //user.SecurityStamp = updatedUser.SecurityStamp; //SecurityStamp is a rondom value generated by run time for each email
                    #endregion


                    var result = await userManager.UpdateAsync(user);   
                    return RedirectToAction("Index");
                }
                catch (Exception ex)
                {
                    throw;
                    #region comments
                    //؟ throw ex بس مش throw ليه هنا انا بقولو 
                    // وى الي بتحفظلك هوا لاكسبشن دا ضرب منين  stack trace بيروح يمسح حاجه اسمها ال throw ex لانى لو قولتلو 
                    //بس throw يعنى الى هوا مثلا فيه فانكشن ندهت فانكشن نده فانكشن والفانكشن دى ضربت اكسبشن ف عششان دا بقولو 
                    #endregion

                }
            }
            return View(updatedUser);

        }

        public async Task<IActionResult> Delete(string id)
        {
            return await Details(id, "Delete");
        }

        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed([FromRoute] string id, ApplicationUser deletedUser)
        {
            if (id != deletedUser.Id)
                return NotFound();
            try
            {
                var result = await userManager.DeleteAsync(deletedUser);
                if (result.Succeeded)
                    return RedirectToAction(nameof(Index));
                foreach (var error in result.Errors)
                    ModelState.AddModelError(string.Empty, error.Description);
                return View(deletedUser);
            }
            catch (Exception ex)
            {
                throw;
            }
        }
    }
}
